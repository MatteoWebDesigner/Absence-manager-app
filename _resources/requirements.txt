Time Categories and Units:
- The user should be able to mark time as “Present”, “Vacation”, “Public Holiday”, “Training”
- All categories other than “Present” are classified as Absent
- Weekends should be ignored by the system (not displayed and no classification should be given)
- The system should work on units of half days
- The default for days should be “Present” other than Public Holidays
- Public Holidays should be defaulted to “Public Holiday” however should be able to be changed to any of the other categories

Interface:
- The user interface should be intuitive and require no user training
- The user should be able to see the records for other team members as they make their selections
- The interface should be designed to be able to deal with projects with up to 40 people
- The interface should highlight clashes with other users. A clash is defined as:
	- Absenteeism overlaps with another user
	- Absenteeism is adjacent to another user
	- Absenteeism is within 4 days of another user
- The user interface should favour graphical representation over form input
- The interface should deal with a period of up to 12 months in the future
- It is not required that all 12 months must be shown at the same time and the interface should be optimised for the most common use case (Vacation and training to be added within the next 3 months)
- The interface should be designed to reduce the required interactions (clicks, scrolls, searches, etc.) from the user to be able to
	- Select a relevant time to book absence
	- Input absence
	- Get feedback on clashes of input absence (can be automatic if required)
	- Save (can be automatic if required)

TASK CONTEXT
This activity is designed to allow you to show your ability to understand requirements and translate them into a workable solution. As such to reduce overhead please note:
- There is no need to build the user login, you can hard code the logged in user as assume the component you build sits behind any user authentication
- You do not need to include the server side handling or database connection. A csv file has been supplied with the database data, you can use this as input. Feel free to change its structure based on your requirements if needed
- Concentrate on the front end design and build, there is no need to build the calls back to the server once the update is made. Updating the local object and front end is sufficient. For convenience please log the object containing the user’s updates that you would have sent to the server to the Console preceded by the text “EXAMPLE SERVER UPDATE REQUEST”